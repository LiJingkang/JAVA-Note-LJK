* 日志配置文件，

* log4j2.xml
        <?xml version="1.0" encoding="UTF-8" ?>
        <!DOCTYPE RelativeLayout>

        <!-- 好像少了存放的位置 -->
        <!--  -->

        <Configuration>
            
            Appenders (输出源)
            <Appenders>
                <!-- Console（控制台打印） -->
                <Console name="Console" target="SYSTEM_OUT">
                    <PatternLayout pattern="%d{HH:mm:ss.SSS} [%t] %-5level %logger{36} - %msg%n" />
                </Console>

                <RollingFile name="RollingFile" fileName="/jc-log/jc.log"  
                    filePattern="/jc-log/$${date:yyyy-MM}/%d{yyyy-MM-dd}-%i.jc.log.gz"> <!-- 存放的日志名字 -->
                    <PatternLayout
                        pattern="%d{yyyy-MM-dd 'at' HH:mm:ss z} %-5level %logger{36} %L %M - %msg%xEx%n" />
                    <SizeBasedTriggeringPolicy size="10MB" /> <!-- 日志存放大小 -->
                </RollingFile>

                <File name="ERROR" fileName="/jc-log/error.log"
                    filePattern="/jc-log/$${date:yyyy-MM}/%d{yyyy-MM-dd}-%i.jc.error.gz">
                    <ThresholdFilter level="error" onMatch="ACCEPT"
                        onMismatch="DENY" />
                    <PatternLayout
                        pattern="%d{yyyy.MM.dd 'at' HH:mm:ss z} %-5level %class{36} %L %M - %msg%xEx%n" />
                    <SizeBasedTriggeringPolicy size="10MB" />
                </File>
            </Appenders>

            <!-- 首先介绍loggers标签，用于定义logger的lever和所采用的appender，
                其中appender-ref必须为先前定义的 appenders的名称，
                例如，此处为Console。
                那么log就会以appender所定义的输出格式来输出log。 -->
            <!-- root标签为log的默认输出形式，
                如果一个类的log没有在loggers中明确指定其输出lever与格式，
                那么就会采用root中定义的格式。例如以下定义： -->
            Loggers(记录器)
            <Loggers>
                <Logger name="org.springframework" level="info" additivity="false">
                    <appender-ref ref="RollingFile" />
                    <appender-ref ref="ERROR" />
                    <appender-ref ref="Console" />
                </Logger>
                <Logger name="org.apache.ibatis" level="debug" additivity="false">
                    <appender-ref ref="Console" />
                </Logger>
                <Logger name="com.newings" level="debug" additivity="false">
                    <appender-ref ref="RollingFile" />
                    <appender-ref ref="ERROR" />
                    <appender-ref ref="Console" />
                </Logger>
                <Root level="warn">
                    <appender-ref ref="RollingFile" />
                    <appender-ref ref="ERROR" />
                    <appender-ref ref="Console" />
                </Root>
            </Loggers>


        </Configuration>


————————————————————————————————————————————————————————————————————————————————————————————————————
* 上面的例子

    <?xml version="1.0" encoding="UTF-8"?>  
    <configuration status="OFF">  
      <appenders>  
        <Console name="Console" target="SYSTEM_OUT">  
          <PatternLayout pattern="%d{HH:mm:ss.SSS} [%t] %-5level %logger{36} - %msg%n"/>  
        </Console>  
      </appenders>  
      <loggers>  
        <logger name="com.relin.HelloLog4j" level="error" additivity="false">  
          <appender-ref ref="Console"/>  
        </logger>  
        <root level="trace">  
          <appender-ref ref="Console"/>  
        </root>  
      </loggers>  
    </configuration>  

    <!-- 此时，HelloLog4j则会在error级别上输出log，而其他类则会在trace级别上输出log。
        需要注意的是 additivity选项，如果设置为true（默认值）则HelloLog4j的log会被打印两次，
        第二次打印是由于HelloLog4j同时也满足 root里面定义的trace -->
——————————————————————————————————————————————————————————————————————————————————————————————————
* 这是网上教程里面的配置。
    * 但是在 JC 项目中，并不是这么配置的
    log4j.rootLogger=INFO,Console,File  
    # 定义日志输出目的地为控制台  
    log4j.appender.Console=org.apache.log4j.ConsoleAppender  
    log4j.appender.Console.Target=System.out  
    # 可以灵活地指定日志输出格式，下面一行是指定具体的格式  
    log4j.appender.Console.layout = org.apache.log4j.PatternLayout  
    log4j.appender.Console.layout.ConversionPattern=[%c] - %m%n  
      
    # 文件大小到达指定尺寸的时候产生一个新的文件  
    log4j.appender.File = org.apache.log4j.RollingFileAppender  
    # 指定输出目录  
    log4j.appender.File.File = logs/ssm.log  
    # 定义文件最大大小  
    log4j.appender.File.MaxFileSize = 10MB  
    # 输出所以日志，如果换成DEBUG表示输出DEBUG以上级别日志  
    log4j.appender.File.Threshold = ALL  
    log4j.appender.File.layout = org.apache.log4j.PatternLayout  
    log4j.appender.File.layout.ConversionPattern =[%p] [%d{yyyy-MM-dd HH\:mm\:ss}][%c]%m%n  